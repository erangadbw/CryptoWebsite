{"version":3,"sources":["assets/BTC.jpg","components/NavigationBar.js","components/Jumbotron.js","components/PriceForm.js","components/DisplayStats.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Styles","styled","div","NavigationBar","Navbar","expand","Brand","Toggle","aria-controls","Component","btcImage","Jumbotron","fluid","className","Container","PriceForm","props","handleSubmit","event","a","preventDefault","console","log","JSON","stringify","state","Currency","Date","fetch","method","headers","body","response","json","returnFormData","setState","handleChange","bind","target","name","value","this","disableSubmit","Form","data-cy-submit-button","onSubmit","Label","Control","data-cy-currecy-select","as","onChange","data-cy-date-select","type","data-cy-errorfuturemessage","style","display","showFutureError","data-cy-errorolddatemessage","showOldDateError","data-cy-errorunkownmessage","showUnknownError","Button","variant","disabled","verifiSubmit","DisplayStats","Table","colSpan","dateStamp","currency","calcData","minValue","highValue","minTimeStamp","highTimeStamp","profit","App","getFormData","priceData","errorMessage","date","showDisplayStats","modalShow","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e8889f2f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/BTC.eb9d07df.jpg\";","import React, {Component} from 'react';\r\n\r\nimport {Nav, Navbar} from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\n\r\nconst Styles = styled.div`\r\n .navbar {\r\n   background-color:#222;\r\n }\r\n\r\n.navbar-brand, .navbar-nav .nav-link {\r\n  color:#bbb;\r\n\r\n  &:hover {\r\n    color: white;\r\n  }\r\n}\r\n`;\r\n\r\nexport class NavigationBar extends Component {\r\n  render(){\r\n    return(\r\n    <Styles>\r\n      <Navbar expand =\"lg\">\r\n        <Navbar.Brand >Crypto Price </Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\"/>\r\n      </Navbar>\r\n    </Styles>\r\n  )};\r\n}\r\n","import React ,{Component} from 'react'\r\nimport {Jumbotron as Jumbo, Container} from 'react-bootstrap';\r\nimport styled from 'styled-components';\r\nimport btcImage from '../assets/BTC.jpg'\r\n\r\n\r\nconst Styles = styled.div`\r\n  .jumbo {\r\n    background:url(${btcImage}) no-repeat fixed bottom;\r\n    background-size: cover;\r\n    color:#efefef;\r\n    height:200px;\r\n    position:relative;\r\n    z-index:-2;\r\n  }\r\n\r\n  .overlay {\r\n    background-color: #000;\r\n    opacity:0.6;\r\n    position:absolute;\r\n    top:0;\r\n    left:0;\r\n    bottom: 0;\r\n    right:0;\r\n    z-index: -1\r\n  }\r\n\r\n`\r\n\r\nexport class Jumbotron extends Component {\r\n  render(){\r\n    return(\r\n    <Styles>\r\n    <Jumbo fluid className =\"jumbo\">\r\n      <div className =\"overlay\"></div>\r\n      <Container>\r\n        <h1>Welcome</h1>\r\n        <p> Please select a currency and date </p>\r\n      </Container>\r\n    </Jumbo>\r\n    </Styles>\r\n  )};\r\n}\r\n","import React, {Component} from 'react';\r\nimport {Form,Button} from 'react-bootstrap'\r\nimport fetch from 'cross-fetch'\r\nimport './PriceForm.css'\r\n\r\nexport class PriceForm extends Component {\r\n\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        Currency:'',\r\n        Date:'',\r\n      };\r\n      this.handleChange = this.handleChange.bind(this);\r\n      this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(event){\r\n     const target = event.target;\r\n     const name = target.name;\r\n     const value = target.value\r\n     this.setState({\r\n       [name]:value\r\n     })\r\n   }\r\n\r\n\r\n   verifiSubmit(){\r\n    var disableSubmit = false;\r\n\r\n    if(this.state.Currency === ''){\r\n      disableSubmit = true;\r\n    }\r\n    if(this.state.Date === ''){\r\n      disableSubmit = true;\r\n    }\r\n    return disableSubmit\r\n   }\r\n\r\n\r\n\r\n   handleSubmit = async event => {\r\n     event.preventDefault();\r\n     console.log(JSON.stringify({\"currency\":this.state.Currency, \"timestamp\":this.state.Date}));\r\n\r\n     //Sends a post request to the Amazon API - which in turn runs a lambda function ,\r\n     //this request will recieve the calculated lowest and highest prices and profit.\r\n     const response = await fetch('https://f1qrz44wh9.execute-api.ap-southeast-2.amazonaws.com/api/crypto', {\r\n       method:'POST',\r\n       headers:{\r\n         'Accept':'application/json',\r\n         'Content-Type': 'application/json'\r\n       },\r\n       body:JSON.stringify({\"currency\":this.state.Currency,\"timestamp\":this.state.Date})\r\n     })\r\n\r\n     const body =  await response.json();\r\n\r\n     //We than return the recieved data back to the App component to display the data through the Display Stats Component\r\n     this.props.returnFormData(body)\r\n     this.setState({\r\n      Currency:'',\r\n      Date:''\r\n    })\r\n  }\r\n\r\n  render(){\r\n    console.log(this.state);\r\n    return (\r\n  <div className =\"wrapper\">\r\n    <div className =\"form-wrapper\">\r\n              <Form data-cy-submit-button className = \"form\" onSubmit = {this.handleSubmit}  >\r\n                  <div className = \"typical\" >\r\n                    <Form.Label>Currency</Form.Label>\r\n                    <Form.Control  data-cy-currecy-select className = \"inputwrap\"  as=\"select\" name = \"Currency\" onChange = {this.handleChange} value={this.state.Currency}>\r\n                      <option>Choose..</option>\r\n                      <option value = \"BTC\">Bitcoin</option>\r\n                      <option value = \"LTC\">Litecoin</option>\r\n                      <option value = \"ETH\">Ethereum</option>\r\n                      <option value = \"ETC\">Ethereum Classic</option>\r\n                    </Form.Control>\r\n                </div>\r\n                  <div className =\"typical\">\r\n                    <Form.Label>Date</Form.Label>\r\n                    <Form.Control data-cy-date-select className = \"inputwrap\"  type=\"date\" name=\"Date\" onChange = {this.handleChange} value={this.state.Date}>\r\n                    </Form.Control>\r\n                    <span data-cy-errorfuturemessage style = {{display:this.props.showFutureError}} className=\"errorMessage\">Please enter a date before today</span>\r\n                    <span data-cy-errorolddatemessage style = {{display:this.props.showOldDateError}} className=\"errorMessage\">Please enter a date after 2018</span>\r\n                    <span data-cy-errorunkownmessage style = {{display:this.props.showUnknownError}} className=\"errorMessage\">Unkown error Please try again</span>\r\n                  </div>\r\n                <div className = \"submitButton\">\r\n                  <Button className = \"submitButton-button\" variant=\"primary\" type=\"submit\"  disabled = {this.verifiSubmit()}>\r\n                    Submit\r\n                  </Button>\r\n                </div>\r\n             </Form>\r\n    </div>\r\n  </div>\r\n)};\r\n}\r\n","import React , {Component} from 'react'\r\nimport {Table} from 'react-bootstrap'\r\nimport './DisplayStats.css';\r\n\r\n\r\nexport class DisplayStats extends Component {\r\n  render(){\r\n    return (\r\n\r\n        <div className = \"wrapper\">\r\n        <div className = \"table-wrapper\">\r\n        <Table   >\r\n          <thead >\r\n            <tr>\r\n              <th className = \"dateStamp\" colSpan= \"4\">\r\n              Date: {this.props.dateStamp}\r\n              </th>\r\n            </tr>\r\n            <tr>\r\n              <th className = \"cryptoPair\" colSpan= \"4\">\r\n              Currency: {this.props.currency}\r\n              </th>\r\n            </tr>\r\n            <tr>\r\n              <th className = \"marketDirection\" colSpan= \"2\">\r\n              BUY\r\n              </th>\r\n              <th className = \"marketDirection\" colSpan= \"2\">\r\n              SELL\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <td className= \"price\" colSpan= \"2\" > ${this.props.calcData.minValue}</td>\r\n              <td className= \"price\" colSpan= \"2\" >${this.props.calcData.highValue}</td>\r\n            </tr>\r\n            <tr>\r\n              <td className= \"time\" colSpan= \"2\">{this.props.calcData.minTimeStamp}</td>\r\n              <td className= \"time\" colSpan= \"2\">{this.props.calcData.highTimeStamp}</td>\r\n            </tr>\r\n            <tr>\r\n              <td className= \"profit\" colSpan=\"5\" >Profit: ${this.props.calcData.profit}</td>\r\n            </tr>\r\n          </tbody>\r\n        </Table>\r\n        </div>\r\n        </div>\r\n    )};\r\n}\r\n","import React, {Component,} from 'react';\nimport {Container} from 'react-bootstrap'\nimport {NavigationBar} from './components/NavigationBar';\nimport {Jumbotron} from './components/Jumbotron';\nimport {PriceForm} from './components/PriceForm';\nimport {DisplayStats} from './components/DisplayStats';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      Currency:'',\n      Date:'',\n      showDisplayStats:'none',\n      calcData:'',\n      modalShow:false,\n      showFutureError:'none',\n      showOldDateError:'none',\n      showUnknownError:'none'\n\n    };\n  }\n\n  //receives form data from the PriceForm component\n  getFormData = (priceData) => {\n    if(!priceData.errorMessage){\n      this.setState({\n        Currency:priceData.currency,\n        Date:priceData.date,\n        showDisplayStats:'',\n        calcData:priceData.calcData,\n        showFutureError:'none',\n        showOldDateError:'none',\n        showUnknownError:'none'\n      })\n    } else {\n\n      // Displays a errorMessage if the entered date value into the form is before 2018.\n      // Assumes that we can only access data from 2018 and upwards\n      if(priceData.errorMessage === 'dateIsBefore2018'){\n          this.setState({\n              showOldDateError:'',\n              showFutureError:'none',\n              showUnknownError:'none'\n          })\n        //Displays a errorMesage if the date entered is greater than today\n      } else if(priceData.errorMessage === 'dateisGreaterThanToday') {\n        this.setState({\n            showFutureError:'',\n            showOldDateError:'none',\n            showUnknownError:'none'\n        })\n      } else {\n          //catch all which covers all unknown errors from the Exchange API\n          this.setState({\n              showFutureError:'none',\n              showOldDateError:'none',\n              showUnknownError:''\n          })\n        }\n      }\n    }\n\n\n  render(){\n    console.log(this.state)\n    let modalClose = () => this.setState({modalShow:false})\n\n    return (\n      <React.Fragment>\n        <NavigationBar />\n        <Jumbotron/>\n        <PriceForm\n         returnFormData ={this.getFormData}\n         showFutureError = {this.state.showFutureError}\n         showOldDateError = {this.state.showOldDateError}\n         showUnknownError = {this.state.showUnknownError}\n         />\n        <DisplayStats calcData = {this.state.calcData} dateStamp = {this.state.Date} currency = {this.state.Currency}  />\n      </React.Fragment>\n\n    )};\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}